import { prisma } from "@/lib/prisma";
import { hash } from "bcryptjs";
import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
	try {
		console.log("=== D√âBUT API REGISTER ===");
		const { name, email, password, invitationToken } = await request.json();

		// Debug: Afficher les donn√©es re√ßues
		console.log("Donn√©es re√ßues:", {
			name,
			email,
			password: password ? "***" : "undefined",
			invitationToken,
		});

		// Validation des donn√©es
		if (!name || !email || !password || !invitationToken) {
			console.log("Validation √©chou√©e:", {
				hasName: !!name,
				hasEmail: !!email,
				hasPassword: !!password,
				hasToken: !!invitationToken,
			});
			return NextResponse.json(
				{ error: "Tous les champs sont requis" },
				{ status: 400 }
			);
		}

		console.log("‚úÖ Validation des champs OK");

		// Valider l'invitation d'abord
		console.log("üîç Validation de l'invitation...");
		const invitation = await prisma.invitation.findUnique({
			where: { token: invitationToken },
			include: { client: true },
		});

		if (!invitation) {
			console.log("‚ùå Invitation non trouv√©e");
			return NextResponse.json(
				{ error: "Invitation invalide" },
				{ status: 400 }
			);
		}

		console.log("‚úÖ Invitation trouv√©e:", invitation.id);

		if (invitation.status === "ACCEPTED") {
			console.log("‚ùå Invitation d√©j√† utilis√©e");
			return NextResponse.json(
				{ error: "Invitation d√©j√† utilis√©e" },
				{ status: 400 }
			);
		}

		if (invitation.expiresAt < new Date()) {
			console.log("‚ùå Invitation expir√©e");
			return NextResponse.json(
				{ error: "Invitation expir√©e" },
				{ status: 400 }
			);
		}

		if (invitation.email !== email) {
			console.log("‚ùå Email ne correspond pas");
			return NextResponse.json(
				{ error: "L'email ne correspond pas √† l'invitation" },
				{ status: 400 }
			);
		}

		console.log("‚úÖ Invitation valide");

		// V√©rifier que l'utilisateur n'existe pas d√©j√† (apr√®s validation de l'invitation)
		console.log("üîç V√©rification utilisateur existant...");
		const existingUser = await prisma.user.findUnique({
			where: { email },
		});

		if (existingUser) {
			console.log("‚ùå Utilisateur d√©j√† cr√©√© avec cet email");
			return NextResponse.json(
				{ error: "Un compte utilisateur existe d√©j√† avec cet email" },
				{ status: 400 }
			);
		}

		console.log("‚úÖ Email disponible pour cr√©ation d'utilisateur");

		// Hasher le mot de passe
		console.log("üîê Hashage du mot de passe...");
		const hashedPassword = await hash(password, 12);
		console.log("‚úÖ Mot de passe hash√©");

		// Cr√©er l'utilisateur
		console.log("üë§ Cr√©ation de l'utilisateur...");
		const user = await prisma.user.create({
			data: {
				name,
				email,
				hashedPassword: hashedPassword,
				role: "CLIENT",
				clientId: invitation.clientId,
			},
		});

		console.log("‚úÖ Utilisateur cr√©√©:", user.id);

		// Marquer l'invitation comme utilis√©e
		console.log("üìù Marquage de l'invitation comme utilis√©e...");
		await prisma.invitation.update({
			where: { id: invitation.id },
			data: {
				status: "ACCEPTED",
				acceptedAt: new Date(),
			},
		});

		console.log("‚úÖ Invitation marqu√©e comme utilis√©e");

		console.log("=== FIN API REGISTER - SUCC√àS ===");

		return NextResponse.json(
			{
				message: "Compte cr√©√© avec succ√®s",
				user: {
					id: user.id,
					name: user.name,
					email: user.email,
					role: user.role,
				},
			},
			{ status: 201 }
		);
	} catch (error) {
		console.error("=== ERREUR API REGISTER ===");
		console.error("Erreur compl√®te:", error);
		console.error(
			"Stack trace:",
			error instanceof Error ? error.stack : "Pas de stack trace"
		);
		console.error("=== FIN ERREUR ===");
		return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
	}
}
