// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  // Auth local
  hashedPassword     String?
  // Rôles
  role               Role      @default(CLIENT)
  // Multi-tenant (nullable pour compatibilité)
  clientId           String?

  accounts           Account[]
  sessions           Session[]
  subscriptions      Subscription[]
  sites              Site[]
  events             AnalyticsEvent[]
  // Relations multi-tenant
  client             Client?   @relation(fields: [clientId], references: [id])
  createdInvitations Invitation[] @relation("InvitationCreator")
  tickets            Ticket[]
  passwordResets     PasswordReset[]
  sentMessages       TicketMessage[] @relation("MessageSender")

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([token])
  @@index([userId])
}

enum Role {
  ADMIN
  CLIENT
}

model Subscription {
  id                     String   @id @default(cuid())
  userId                 String
  stripeCustomerId       String?  @unique
  stripeSubscriptionId   String?  @unique
  status                 String?  // trialing | active | past_due | canceled | incomplete
  priceId                String?
  currentPeriodStart     DateTime?
  currentPeriodEnd       DateTime?

  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Site {
  id          String   @id @default(cuid())
  userId      String
  name        String
  domain      String   @unique
  isActive    Boolean  @default(true)
  // Multi-tenant (nullable pour compatibilité)
  clientId    String?

  owner       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  client      Client?  @relation(fields: [clientId], references: [id])
  events      AnalyticsEvent[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AnalyticsEvent {
  id          String   @id @default(cuid())
  siteId      String
  userId      String?
  type        EventType
  path        String?
  country     String?
  userAgent   String?
  occurredAt  DateTime @default(now())

  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])

  @@index([siteId, type, occurredAt])
}

enum EventType {
  VISIT
  PAGEVIEW
  UPTIME_PING
}

// ===== MODÈLES MULTI-TENANT =====

model Client {
  id                String   @id @default(cuid())
  name              String
  companyName       String
  primaryEmail      String   @unique
  stripeCustomerId  String?  @unique
  isActive          Boolean  @default(true)
  
  // Relations
  users             User[]
  sites             Site[]
  invitations       Invitation[]
  tickets           Ticket[]
  invoices          Invoice[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Invitation {
  id              String    @id @default(cuid())
  clientId        String
  email           String
  token           String    @unique
  status          InvitationStatus @default(PENDING)
  expiresAt       DateTime
  acceptedAt      DateTime?
  createdByUserId String
  
  // Relations
  client          Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdBy       User      @relation("InvitationCreator", fields: [createdByUserId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([token])
  @@index([email])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

model Ticket {
  id              String        @id @default(cuid())
  clientId        String
  createdByUserId String
  title           String
  description     String?
  status          TicketStatus  @default(OPEN)
  priority        TicketPriority @default(MEDIUM)
  
  // Relations
  client          Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdBy       User          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  messages        TicketMessage[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([clientId, status])
  @@index([createdByUserId])
}

model TicketMessage {
  id         String   @id @default(cuid())
  ticketId   String
  senderId   String
  body       String

  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@index([ticketId, createdAt])
  @@index([senderId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Invoice {
  id                 String    @id @default(cuid())
  clientId           String
  stripeInvoiceId    String?   @unique
  status             InvoiceStatus
  amountDue          Int       // en centimes
  amountPaid         Int       // en centimes
  currency           String    @default("eur")
  periodStart        DateTime?
  periodEnd          DateTime?
  hostedInvoiceUrl   String?
  
  // Relations
  client             Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  @@index([clientId, status])
  @@index([stripeInvoiceId])
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}
