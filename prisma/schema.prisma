// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  // Auth local
  hashedPassword     String?
  // RÃ´les
  role               Role      @default(CLIENT)

  accounts           Account[]
  sessions           Session[]
  subscriptions      Subscription[]
  sites              Site[]
  events             AnalyticsEvent[]

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier])
}

enum Role {
  ADMIN
  CLIENT
}

model Subscription {
  id                     String   @id @default(cuid())
  userId                 String
  stripeCustomerId       String?  @unique
  stripeSubscriptionId   String?  @unique
  status                 String?  // trialing | active | past_due | canceled | incomplete
  priceId                String?
  currentPeriodStart     DateTime?
  currentPeriodEnd       DateTime?

  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Site {
  id          String   @id @default(cuid())
  userId      String
  name        String
  domain      String   @unique
  isActive    Boolean  @default(true)

  owner       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events      AnalyticsEvent[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AnalyticsEvent {
  id          String   @id @default(cuid())
  siteId      String
  userId      String?
  type        EventType
  path        String?
  country     String?
  userAgent   String?
  occurredAt  DateTime @default(now())

  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])

  @@index([siteId, type, occurredAt])
}

enum EventType {
  VISIT
  PAGEVIEW
  UPTIME_PING
}
